name: CI-CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  # 1. 빌드·테스트·이미지 푸시
  build:
    runs-on: ubuntu-latest
    environment: env

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'


      - name: Build (no Test)
        run: ./gradlew clean bootJar --no-daemon

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN:    ${{ secrets.DOCKERHUB_TOKEN }}
          IMAGE_TAG:          ${{ github.sha }}
        run: |
          docker build \
            -t $DOCKERHUB_USERNAME/pickly-be:$IMAGE_TAG \
            .
          docker push \
            $DOCKERHUB_USERNAME/pickly-be:$IMAGE_TAG

  # 2. 빌드 성공 후 배포
  deploy:
    environment: env
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Check out code # 이 스텝이 있어야 리포지토리 파일에 접근 가능
        uses: actions/checkout@v3

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{secrets.SSH_KNOWN_HOSTS}}

      - name: Copy docker-compose.yml to EC2
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          DEST_PATH: /home/${{ secrets.SSH_USER }}/pickly/docker-compose.yml # EC2의 목적지 경로
        run: |
          # `docker-compose.yml` 파일이 리포지토리의 루트에 있다고 가정합니다.
          scp -o StrictHostKeyChecking=no ./docker-compose.yml $SSH_USER@$SSH_HOST:$DEST_PATH


      - name: Deploy to EC2 via SSH
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST <<EOF
            cd /home/$SSH_USER/pickly
            # 환경변수 내보내기
            export DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME
            export IMAGE_TAG=$IMAGE_TAG
            # docker
            docker pull $DOCKERHUB_USERNAME/pickly-be:$IMAGE_TAG
            docker-compose down
            docker-compose up -d
          EOF